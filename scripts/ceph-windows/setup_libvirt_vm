#!/usr/bin/env bash
set -o errexit
set -o pipefail

if [[ -z $CEPH_WIN_CI_KEY ]]; then
    echo "ERROR: The CI SSH private key secret (CEPH_WIN_CI_KEY) is not set"
    exit 1
fi

export VM_IMAGE_URL=${VM_IMAGE_URL:-"https://filedump.ceph.com/windows/ceph-win-ltsc2019-ci-image.qcow2"}
export VM_NAME=${VM_NAME:-"ceph-windows-client-${JOB_NAME}-${BUILD_ID}"}
export VM_DIR="${WORKSPACE}/libvirt_windows_vm"

export SSH_USER="administrator"
export SSH_KNOWN_HOSTS_FILE="$VM_DIR/known_hosts"
export SSH_KEY="$CEPH_WIN_CI_KEY"

mkdir -p $VM_DIR

#
# Install requirements (if needed)
#
if ! which virt-install >/dev/null; then
    sudo apt-get update
    sudo apt-get install -y virtinst
fi
if ! which xmllint >/dev/null; then
    sudo apt-get update
    sudo apt-get install -y libxml2-utils
fi
if ! which jq >/dev/null; then
    sudo apt-get update
    sudo apt-get install -y jq
fi
if ! sudo virsh net-info default &>/dev/null; then
    cat << EOF > $WORKSPACE/default-net.xml
<network>
  <name>default</name>
  <bridge name="virbr0"/>
  <forward mode="nat"/>
  <ip address="192.168.122.1" netmask="255.255.255.0">
    <dhcp>
      <range start="192.168.122.2" end="192.168.122.254"/>
    </dhcp>
  </ip>
</network>
EOF
    sudo virsh net-define $WORKSPACE/default-net.xml
    sudo virsh net-start default
    sudo virsh net-autostart default
    rm $WORKSPACE/default-net.xml
fi

#
# Download the Windows qcow2 image
#
echo "Downloading VM image from $VM_IMAGE_URL"
curl -L -o ${VM_DIR}/ceph-windows-client.qcow2 $VM_IMAGE_URL

#
# Start the Windows testing VM
#
sudo virt-install \
    --name $VM_NAME \
    --os-variant win2k19 \
    --boot hd \
    --virt-type kvm \
    --graphics spice \
    --cpu host \
    --vcpus 4 \
    --memory 4096 \
    --disk ${VM_DIR}/ceph-windows-client.qcow2,bus=virtio \
    --network network=default,model=virtio \
    --controller type=virtio-serial \
    --channel unix,target_type=virtio,name=org.qemu.guest_agent.0 \
    --noautoconsol

#
# Find the VM NIC MAC address
#
sudo virsh dumpxml $VM_NAME > $VM_DIR/libvirt_vm.xml
VM_NIC_MAC_ADDRESS=`xmllint --xpath 'string(/domain/devices/interface/mac/@address)' $VM_DIR/libvirt_vm.xml`
rm $VM_DIR/libvirt_vm.xml

#
# Wait until the QEMU agent reports the VM IP, and it's reachable via SSH
#
SECONDS=0
TIMEOUT=600
SLEEP_SECS=10
while true; do
    if [[ $SECONDS -gt $TIMEOUT ]]; then
        echo "Timeout waiting for the VM to start"
        exit 1
    fi
    # Get the VM NIC IP address from the "default" virsh network
    VM_IP=$(sudo virsh qemu-agent-command $VM_NAME '{"execute":"guest-network-get-interfaces"}' | jq -r ".return[] | select(.\"hardware-address\"==\"${VM_NIC_MAC_ADDRESS}\") | .\"ip-addresses\"[] | select(.\"ip-address\" | startswith(\"192.168.122.\")) | .\"ip-address\"") || {
        echo "Retrying in $SLEEP_SECS seconds"
        sleep $SLEEP_SECS
        continue
    }
    if [[ -z $VM_IP ]]; then
        echo "Cannot find the VM IP address. Retrying in $SLEEP_SECS seconds"
        sleep $SLEEP_SECS
        continue
    fi
    ssh-keyscan -H $VM_IP &> $SSH_KNOWN_HOSTS_FILE || {
        echo "SSH is not reachable yet"
        sleep $SLEEP_SECS
        continue
    }
    SSH_ADDRESS=$VM_IP ssh_exec hostname || {
        echo "Cannot execute SSH commands yet"
        sleep $SLEEP_SECS
        continue
    }
    break
done
export SSH_ADDRESS=$VM_IP
